#single inheritance

# class father:
#     def func1(self):
#         print("this is father class")
# class son(father):
#     def func2(self):
#         print("this is son class")

# s_obj = son()
# s_obj.func1()
# s_obj.func2()

#multiple inheritance

# class father:
#     def func1(self):
#         print("this is father class")

# class mother:
#     def func2(self):
#         print("this is mother class")

# class son(father,mother):
#     def func2(self):
#         print("this is son class")

# s_obj = son()
# s_obj.func1()
# s_obj.func2()

#multilevel inheritance

# class grandfather:
#     def func1(self):
#         print("this is grandfather class")
# class father(grandfather):
#     def func2(self):
#         print("this is father class")
# class son(father):
#     def func3(self):
#         print("this is son class")

# s_obj = son()
# s_obj.func1()

import threading
import time

# Define a function that prints numbers from 1 to 5 with a delay
def print_numbers():
    for i in range(1, 6):
        print(i)
        time.sleep(1)  # Simulate some processing time

# Define a function that prints letters from 'a' to 'e' with a delay
def print_letters():
    for letter in 'abcde':
        print(letter)
        time.sleep(1)  # Simulate some processing time

# Create two threads, each executing a different function
thread1 = threading.Thread(target=print_numbers)
thread2 = threading.Thread(target=print_letters)

# Start the threads
thread1.start()
thread2.start()

# Wait for both threads to finish
thread1.join()
thread2.join()

print("Both threads have finished executing")

